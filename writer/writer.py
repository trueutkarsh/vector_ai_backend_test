"""
This module is the topmost layer
It will interact with kafka to read messages
from client, parse them and call the database storage layer.
Following the operation, it will either 
return SUCCESS or FAILURE

kafka message should be for format
{
    "request_id": "<request_id>"
    "type": INSERT_CONTINENT,
    "client_id": "<uuid generated by client>"
    "values: {
        "name": name,
        "area": area,
        "population": populations
    }
}

"""

from storageinterface import StorageInterface
from middleware.kafkaconsumerproducer import KafkaConsumerProducer

import json


class Writer(object):
    def __init__(self, config):

        self._config = config
        self._storage = StorageInterface(config["database"])
        self._queue = KafkaConsumerProducer(config["kafka"], self.process_message)
        self._msg_fn_map = {
            "INSERT_CONTINENT": self._insert_continent,
            "INSERT_COUNTRY": self._insert_country,
            "INSERT_CITY": self._insert_city,
        }
        # start reading requests from kafka
        self._queue.start()

    def process_message(self, kfmsg):
        msg = json.loads(kfmsg)
        errormsg = None
        result = False
        if msg["type"] not in self._msg_fn_map:
            errormsg = "ErrorMsg: Illegal operation to writer"
        else:
            result = self._msg_fn_map[msg["type"]](msg["values"])
        response = {
            "request_id": msg["request_id"],
            "type": msg["type"],
            "success": result,
            "errormsg": errormsg,
        }

        self._queue.send(
            json.dumps(response), suffix=".{}".format(msg.get("client_id", ""))
        )

    def _insert_continent(self, values):
        return self._storage.add_continent(
            values["name"], values["population"], values["area"]
        )

    def _insert_country(self, values):
        return self._storage.add_country(
            values["name"],
            values["population"],
            values["area"],
            values["num_hospitals"],
            values["num_rivers"],
            values["num_schools"],
            values["parent_continent"],
        )

    def _insert_city(self, values):
        return self._storage.add_city(
            values["name"],
            values["population"],
            values["area"],
            values["num_roads"],
            values["num_trees"],
            values["num_shops"],
            values["num_schools"],
            values["parent_country"],
        )
